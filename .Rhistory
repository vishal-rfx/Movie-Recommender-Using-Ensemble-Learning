4+5
4/5
?sum
library(qlcMatrix)
?qlcMatrix::cosSparse
?qlcMatrix::corSparse
setwd("/home/will-of-d/Desktop/MovieRecommendationSystem")
df <- read.csv("datasets/ratings.csv")
df$timestamp <- as.POSIXct(as.numeric(df$timestamp), origin = '1970-01-01', tz = 'GMT')
df <- df[order(df$timestamp),]
sprintf("No of Nan values in the dataset is %d",sum(is.na(df)))
total_rows <- nrow(df)
sprintf("No of rows in dataset is %d",total_rows)
df <- subset(df,select = -c(timestamp))
df <- df[1:10000,]
sprintf("No of rows in dataset is %d",nrow(df))
users <- unique(df[c("userId")])
if(!file.exists("datasets/users_idx.csv")){
write.csv(users,"datasets/users_idx.csv",row.names = FALSE)
}
movies <- unique(df[c("movieId")])
if(!file.exists("datasets/movies_idx.csv")){
write.csv(movies,"datasets/movies_idx.csv",row.names = FALSE)
}
train_df <- df[1:(0.8*nrow(df)),]
test_df <- df[(0.8*nrow(df)+1):nrow(df),]
sprintf("No of rows in train_df is %d",nrow(train_df))
sprintf("No of rows in test_df is %d",nrow(test_df))
if(!file.exists("datasets/train.csv")){
write.csv(train_df,"datasets/train.csv",row.names = FALSE)
}
if(!file.exists("datasets/test.csv")){
write.csv(test_df,"datasets/test.csv",row.names = FALSE)
}
setwd("/home/will-of-d/Desktop/MovieRecommendationSystem")
library(Matrix)
train_df <- read.csv("datasets/train.csv")
test_df <- read.csv("datasets/test.csv")
users_idx_df = read.csv("datasets/users_idx.csv")
head(users_idx_df)
movies_idx_df = read.csv("datasets/movies_idx.csv")
head(movies_idx_df)
train_df$rowIdx <- match(train_df$userId,users_idx_df$userId)
head(train_df)
train_df$colIdx <- match(train_df$movieId,movies_idx_df$movieId)
head(train_df)
test_df$rowIdx <- match(test_df$userId,users_idx_df$userId)
head(test_df)
test_df$colIdx <- match(test_df$movieId,movies_idx_df$movieId)
head(test_df)
setwd("/home/will-of-d/Desktop/MovieRecommendationSystem")
library(Matrix)
sparse_mat =readMM("res/train_sparse_matrix.txt")
sum_of_rating = sum(sparse_mat)
n_nonzero = nnzero(sparse_mat,na.counted = FALSE)
sprintf("Sparsity of the sparse matrix is %f %%",
100-n_nonzero*100/(nrow(sparse_mat)*ncol(sparse_mat)))
global_avg = (sum_of_rating/n_nonzero)
global_avg
total_users = nrow(unique(df[c("userId")]))
train_users = nrow(unique(train_df[c("userId")]))
unique_test_user = total_users-train_users
sprintf("Total number of users is %d",total_users)
sprintf("Total number of train users is %d",train_users)
sprintf("Total number of unique test users is %d",unique_test_user)
sprintf("Total percent of unique test users is %f %%",unique_test_user/total_users*100)
total_movies = nrow(unique(df[c("movieId")]))
train_movies = nrow(unique(train_df[c("movieId")]))
unique_test_movies = total_movies-train_movies
sprintf("Total number of movies is %d",total_movies)
sprintf("Total number of train movies is %d",train_movies)
sprintf("Total number of unique test movies is %d",unique_test_movies)
sprintf("Total percent of unique test movies is %f %%",unique_test_movies/total_movies*100)
library(Matrix)
MS_matrix = readMM("res/MS_matrix.txt") # similarity matrix
movies_df = read.csv("datasets/movies.csv",stringsAsFactors = FALSE)
get_similar_movies <- function(movie_id,n_movies = 10){
n_movies = n_movies+1
movies_idx_df = read.csv("datasets/movies_idx.csv")
row_id = which(movies_idx_df$movieId==movie_id)
movie_vec = as.vector(MS_matrix[row_id,])
movie_idx_vec = order(movie_vec,decreasing = TRUE)
s_movies_idx_vec = movie_idx_vec[2:n_movies]
given_movie_row = which(movies_df$movieId==movie_id)
given_movie_title = movies_df$title[given_movie_row]
given_movie_genre = movies_df$genres[given_movie_row]
print(sprintf("Given movie is %s genre: %s",given_movie_title,given_movie_genre))
print(sprintf("Suggested movies are "))
for(idx in s_movies_idx_vec){
movie_id = movies_idx_df$movieId[idx]
movie_row = which(movies_df$movieId==movie_id)
movie_title = movies_df$title[movie_row]
movie_genre = movies_df$genres[movie_row]
print(sprintf("%s genre: %s",movie_title,movie_genre))
}
}
get_similar_movies(1)
train_eval_df = read.csv("output/train_eval.csv")
head(train_eval_df)
colors = c("red","green","blue")
models = c("Model-1","Model-2","Model-3")
barplot(as.matrix(train_eval_df),beside = TRUE,col = colors, ylim = c(0,1.2),ylab = "Loss",main = "Training Loss")
legend("topleft", models,cex = 0.5, fill = colors)
test_eval_df =read.csv("output/test_eval.csv")
head(test_eval_df)
colors = c("red","green","blue")
models = c("Model-1","Model-2","Model-3")
barplot(as.matrix(test_eval_df),beside = TRUE,col = colors, ylim = c(0,1.2),ylab = "Loss",main = "Testing Loss")
legend("topleft", models,cex = 0.4, fill = colors)
if(!file.exists("datasets/users_idx.csv")){
write.csv(users,"datasets/users_idx.csv",row.names = FALSE)
}else{
print("Already exists")
}
